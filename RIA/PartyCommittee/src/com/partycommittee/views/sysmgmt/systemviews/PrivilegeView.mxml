<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" 
		   width="100%" height="100%" 
		   xmlns:tree="com.partycommittee.control.tree.*"
		   creationComplete="creationCompleted()">
	<fx:Script>
		<![CDATA[
			import com.partycommittee.control.tree.classes.Node;
			import com.partycommittee.events.PcAgencyEvent;
			import com.partycommittee.manager.tree.TreeMgr;
			import com.partycommittee.model.ModelLocator;
			import com.partycommittee.vo.PcAgencyVo;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			import mx.events.PropertyChangeEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			[Bindable]
			private var dp:ArrayCollection;
			
			private var _cloneIdArry:Array;
			private var _agencyIdArry:Array;
			[Bindable]
			public function get agencyIdArry():Array {
				this._agencyIdArry = new Array();
				getSelection(dp);
				if (this._cloneIdArry && this._cloneIdArry.length) {
					for each (var cloneIdItem:Number in this._cloneIdArry) {
						var isRepeat:Boolean = false;
						var len:int = this._agencyIdArry.length;
						while (len--) {
							if (this._agencyIdArry[len] == cloneIdItem) {
								isRepeat = true;
								break;
							}
						}
						if (!isRepeat) {
							this._agencyIdArry.push(cloneIdItem);
						}
					}
				}
				return this._agencyIdArry;
			}
			public function set agencyIdArry(value:Array):void {
				this._agencyIdArry = value;
				// Clone id array when Update
				this._cloneIdArry = ObjectUtil.clone(value) as Array;
//				updateData();
			}
			
			private function creationCompleted():void {
				var agencyEvent:PcAgencyEvent = new PcAgencyEvent(PcAgencyEvent.GET_ROOT_AGENCY_FOR_PRIVILEGE);
				agencyEvent.userId = 1;
				agencyEvent.successCallback = onGetRootAgency;
				agencyEvent.dispatch();
			}
			
			private function onGetRootAgency(data:Object, evt:PcAgencyEvent):void {
				dp = new ArrayCollection();
				var rootItem:Node = TreeMgr.getInstance().createItem(data as PcAgencyVo);
				dp.addItem(rootItem);
				dp.addEventListener(CollectionEvent.COLLECTION_CHANGE, onCollectionChanged);
				updateData();
//				dpHandler(dp);
			}
			
			private function onCollectionChanged(event:CollectionEvent):void {
				// If is "ckSelected" changed, do nothing. 
				// Else call updateData() to update new items' selection.
				var needUpdate:Boolean = true;
				if (event.items && event.items.length > 0) {
					for each (var evtItem:PropertyChangeEvent in event.items) {
						if (evtItem.property == "ckSelected") {
							needUpdate = false;
							break;
						}
					}
				}
				if (needUpdate) {
					updateData();
				}
			}
			
//			private function dpHandler(nodes:ArrayCollection):void {
//				for each (var node:Node in nodes) {
//					node.ckSelected = false;
//					if (node.children && node.children.length) {
//						dpHandler(node.children);
//					}
//				}
//			}
			
			private function updateData():void {
				if (!this._agencyIdArry || !this._agencyIdArry.length) {
					return;
				}
				
				updateSelection(dp);
			}
			
			private function updateSelection(nodes:ArrayCollection):void {
				for each (var node:Node in nodes) {
					if (node.children && node.children.length) {
						updateSelection(node.children);
					}
					var agency:PcAgencyVo = node.entity as PcAgencyVo;
					for each (var id:Number in this._agencyIdArry) {
						if (id == agency.id) {
							node.ckSelected = true;
						}
					}
				}
			}
			
			private function getSelection(nodes:ArrayCollection):void {
				for each (var node:Node in nodes) {
					if (node.children && node.children.length) {
						getSelection(node.children);
					}
					var agency:PcAgencyVo = node.entity as PcAgencyVo;
					if (node.ckSelected) {
						this._agencyIdArry.push(agency.id);
					} else {
						if (!this._cloneIdArry || !this._cloneIdArry.length) {
							continue;
						}
						var len:int = this._cloneIdArry.length;
						while (len--) {
							if (this._cloneIdArry[len] == agency.id) {
								this._cloneIdArry.splice(len, 1);
								continue;
							}
						}
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<tree:LoadingTree id="privilegeTree" width="100%" height="100%" dataProvider="{dp}"
					  itemRenderer="com.partycommittee.control.tree.TreeCheckBoxRenderer"/>
</mx:Canvas>
