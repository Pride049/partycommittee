<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   styleName="mainCanvas"
		   width="100%" height="100%" 
		   label="年终总结"
		   creationComplete="onCreationCompleted()"
		   xmlns:button="com.partycommittee.control.button.*" 
		   xmlns:richtexttoolbar="com.partycommittee.control.richtexttoolbar.*">
	<fx:Script>
		<![CDATA[
			import com.lnczx.utils.DateUtilExt;
			import com.partycommittee.events.PcRemindLockEvent;
			import com.partycommittee.events.PcWorkPlanEvent;
			import com.partycommittee.manager.popup.PopupMgr;
			import com.partycommittee.model.ModelLocator;
			import com.partycommittee.util.CRUDEventType;
			import com.partycommittee.util.DataproviderFactory;
			import com.partycommittee.util.DateUtil;
			import com.partycommittee.util.WorkPlanCodeUtil;
			import com.partycommittee.util.WorkPlanStatusUtil;
			import com.partycommittee.vo.PcAgencyVo;
			import com.partycommittee.vo.PcRemindConfigVo;
			import com.partycommittee.vo.PcRemindLockVo;
			import com.partycommittee.vo.PcWorkPlanContentVo;
			import com.partycommittee.vo.PcWorkPlanVo;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			public var tab:TabNavigator;
			
			[Bindable]
			private var workPlanStatusLbl:String;
			
			[Bindable]
			public var browseMode:Boolean = false;
			
			[Bindable]
			private var year:Number;
			
			private var _workPlan:PcWorkPlanVo;
			[Bindable]
			public function get workPlan():PcWorkPlanVo {
				return this._workPlan;
			}
			public function set workPlan(value:PcWorkPlanVo):void {
				this._workPlan = value;
			}
			
			[Bindable]
			private var yearDp:ArrayCollection;
			
			private var _agency:PcAgencyVo;
			[Bindable]
			public function get agency():PcAgencyVo {
				return this._agency;
			}
			public function set agency(value:PcAgencyVo):void {
				this._agency = value;
			}
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			private function onCreationCompleted():void {
				model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChanged);
				addEventListener(FlexEvent.SHOW, onViewShow);
				this.year = model.reportYear;
			}
			
			private function onPropertyChanged(event:PropertyChangeEvent):void {
				if (event.property == "reportYear") {
					this.year = model.reportYear;
					if (this.tab && this.tab.selectedChild == this) {
						refresh();
					}
				}
			}
			
			private function onViewShow(event:FlexEvent):void {
				if (agency) {
					refresh();
				}
			}
			
			private function initRemindLock():void {
				var remindLockEvt:PcRemindLockEvent = new PcRemindLockEvent(PcRemindLockEvent.GET_REMIND_LOCK_BY_ID);
				remindLockEvt.agencyId = agency.id;
				remindLockEvt.year = model.reportYear;
				remindLockEvt.quarter = 0;
				remindLockEvt.month = 0;
				remindLockEvt.typeId = 4;
				remindLockEvt.successCallback = getRemindLockSuccess;
				remindLockEvt.failureCallback = getRemindLockFailure
				remindLockEvt.dispatch();				
			}
			
			private function setRemindLock():void {
				var vo:PcRemindConfigVo = getRemindVo(4);
				var y:Number = new Date().getFullYear();
				var cur_date = new Date();
				
				if (vo) {
					var endDate:Date = new Date((model.reportYear + vo.endYear).toString(), vo.endMonth - 1, vo.endDay, 23, 59, 59 );
					if (DateUtilExt.after(cur_date, endDate)) {
						btn_commit.label ="已锁定";
						btn_commit.enabled = false;
					}
				}
			}	
			
			private function getRemindLockSuccess(data:Object, evt:PcRemindLockEvent):void {
				if (data) {
					var vo:PcRemindLockVo = data as PcRemindLockVo;
					if (vo.statusId == 9) {
						setRemindLock();
					} else {
						btn_commit.label ="上报";
						btn_commit.enabled = true;
					}
				}
			}
			
			private function getRemindLockFailure(data:Object, evt:PcRemindLockEvent):void {
				if (btn_commit.label == "已锁定") {
					btn_commit.label ="上报";
					btn_commit.enabled = true;
				}				
			}		
			
			public function getRemindVo(typeId:Number):PcRemindConfigVo {
				var model:ModelLocator = ModelLocator.getInstance();
				var dd:ArrayCollection = model.remindConfigCollection;
				for(var i = 0; i < dd.length; i++ ) {
					if ( (dd.getItemAt(i) as PcRemindConfigVo).typeId == typeId) {
						return dd.getItemAt(i) as PcRemindConfigVo
					}
				}
				return null;
			}				
			
			private function resetData():void {
				workPlan = null;
				personTxt.text = "";
				textArea.htmlText = "";
				workPlanStatusLbl = "";
			}
			
			private function refresh():void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.GET_WORKPLAN_YEARLY_SUMMARY, agency);
				workPlanEvt.year = year;
				workPlanEvt.successCallback = onGetWorkPlanSuccess;
				workPlanEvt.failureCallback = onGetWorkPlanFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function onGetWorkPlanSuccess(data:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				if (!data) {
					resetData();
					initRemindLock();
					return;
				}
				workPlan = data as PcWorkPlanVo;
				if (!workPlan) {
					return;
				}
				workPlanStatusLbl =  WorkPlanStatusUtil.getWorkPlanStatusDes(workPlan.statusId);
				if (workPlanStatusLbl != "") {
					workPlanStatusLbl = " (" + workPlanStatusLbl + ")";
				}
				if (workPlan.statusId == 0 || workPlan.statusId == 1) {
					yearwpViewStack.selectedChild = reportForm;
					if (workPlan.workPlanContent) {
						personTxt.text = workPlan.workPlanContent.memberName;
						textArea.htmlText = workPlan.workPlanContent.content;
					}
					initRemindLock();
				} else {
					yearwpViewStack.selectedChild = browseForm;
					
					if (workPlan.workPlanContent) {
						b_personTxt.text =  "填写人:" + workPlan.workPlanContent.memberName;
						b_textArea.htmlText = workPlan.workPlanContent.content;
					}						
					if (workPlan.statusId == 4) {
						getWorkPlanComment(workPlan);
					}					
				}
			}
			
			private function getWorkPlanComment(workPlan:PcWorkPlanVo):void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.GET_WORKPLAN_COMMENT);
				workPlanEvt.workPlan = workPlan;
				workPlanEvt.successCallback = onGetWorkplanCommentSuccess;
				workPlanEvt.failureCallback = onGetWorkplanCommentFailure;
				workPlanEvt.dispatch();
			}
			
			private function onGetWorkplanCommentSuccess(data:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				var workplanContent:PcWorkPlanContentVo = data as PcWorkPlanContentVo;
				if (!workplanContent) {
					return;
				}
				browseForm_approve.percentWidth = 100;
				browseForm_approve.percentHeight = 30;
				browseForm_approve.visible = "true";
				b_textArea_app.htmlText = workplanContent.content;
				b_personTxt_eva.text = "评价人:" + workplanContent.memberName;
				dateTxt.text = "评价日期:" + DateUtil.toISOString(workplanContent.updatetime);
			}
			
			private function onGetWorkplanCommentFailure(info:Object, evt:PcWorkPlanEvent):void {
				Alert.show("获取内容失败！");
			}			
			
			private function onGetWorkPlanFailure():void {
				this.enabled = true;
			}
			
			private function onSaveAndCommit():void {
				if (workPlan) {
					doUpdate(true);
				} else {
					doCreate(true);
				}
			}
			
			private function onSaveWithoutSubmit():void {
				if (workPlan) {
					doUpdate();
				} else {
					doCreate();
				}
			}
			
			private function doUpdate(isCommit:Boolean = false):void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(CRUDEventType.UPDATE);
				var updateWorkPlan:PcWorkPlanVo = getUpdateWorkPlan();
				updateWorkPlan.statusId = isCommit ? 2 : 1;
				workPlanEvt.workPlan = updateWorkPlan;
				workPlanEvt.successCallback = onWorkPlanUpdateSuccess;
				workPlanEvt.failureCallback = onWorkPlanUpdateFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function doCreate(isCommit:Boolean = false):void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(CRUDEventType.CREATE);
				var newWorkPlan:PcWorkPlanVo = getNewWorkPlan();
				newWorkPlan.statusId = isCommit ? 2 : 1;
				workPlanEvt.workPlan = newWorkPlan;
				workPlanEvt.successCallback = onWorkPlanCreateSuccess;
				workPlanEvt.failureCallback = onWorkPlanCreateFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function onWorkPlanCreateSuccess(data:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				refresh();
			}
			
			private function onWorkPlanCreateFailure(info:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("保存年终工作总结失败！");
			}
			
			private function onWorkPlanUpdateSuccess(data:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				refresh();
			}
			
			private function onWorkPlanUpdateFailure(info:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("修改年终工作总结失败！");
			}
			
			private function getNewWorkPlan():PcWorkPlanVo {
				var workPlan:PcWorkPlanVo = new PcWorkPlanVo();
				workPlan.typeId = PCConst.WORKPLAN_TYPE_YEARLY_SUMMARY;
				workPlan.year = year;
				workPlan.agencyId = agency.id;
				workPlan.workPlanContent = getWorkPlanContent();
				return workPlan;
			}
			
			private function getUpdateWorkPlan():PcWorkPlanVo {
				workPlan.workPlanContent.memberName = personTxt.text;
				workPlan.workPlanContent.content = textArea.htmlText;
				return workPlan;
			}
			
			private function getWorkPlanContent():PcWorkPlanContentVo {
				var workPlanContent:PcWorkPlanContentVo = new PcWorkPlanContentVo();
				workPlanContent.content = textArea.htmlText;
				workPlanContent.memberName = personTxt.text;
				workPlanContent.type = PCConst.WORKFLOW_TYPE_REPORT;
				return workPlanContent;
			}
			
			private function onBrowseEvaluate():void {
				var commentView:CommentView = new CommentView();
				commentView.workPlan = workPlan;
				PopupMgr.instance.popupWindow(commentView);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:VBox width="100%" height="100%"
			 left="6" right="6" top="6" bottom="6"
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:HBox width="100%" horizontalAlign="center"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Label fontSize="20" fontWeight="bold" text="{year + '年终工作总结'}"/>
			<mx:Label fontSize="20" fontWeight="bold"
					  text="{workPlanStatusLbl}"/>
		</mx:HBox>
		<mx:ViewStack id="yearwpViewStack" width="100%" height="100%" creationPolicy="all">
			
			<mx:VBox id="reportForm" width="100%" height="100%"
					 left="6" right="6" top="6" bottom="6"
					 horizontalScrollPolicy="off" verticalScrollPolicy="auto">
					<richtexttoolbar:PopupRichTextToolBar width="100%" target="{textArea}"/>
					<mx:TextArea id="textArea" width="100%" height="100%"
								 editable="{!workPlan || workPlan.statusId == 1}"/>
					<mx:HBox width="100%" horizontalAlign="left" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label text="填写人："/>
						<mx:TextInput id="personTxt" width="200"
									  editable="{!workPlan || workPlan.statusId == 1}"/>
					</mx:HBox>		
					<!--
					<mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Label text="年    份："/>
						<mx:ComboBox id="yearCmb" dataProvider="{yearDp}" change="onYearCmbChanged()"/>
					</mx:HBox>
					-->
					<mx:ControlBar width="100%" horizontalAlign="center" verticalAlign="middle"
								   visible="{!browseMode}" includeInLayout="{!browseMode}">
						<button:PcButton label="暂存" click="onSaveWithoutSubmit()"
										 visible="{!workPlan || workPlan.statusId == 1}"/>
						<button:PcButton label="上报" id="btn_commit" click="onSaveAndCommit()"
										 visible="{!workPlan || workPlan.statusId == 1}"/>
						<button:PcButton label="查看评价"
										 visible="{workPlan &amp;&amp; workPlan.statusId == 4}"
										 click="onBrowseEvaluate()"/>
					</mx:ControlBar>
				</mx:VBox>
			
			<mx:VBox id="browseForm" width="100%" height="100%"
					 left="6" right="6" top="6" bottom="6"
					 horizontalScrollPolicy="off" verticalScrollPolicy="auto">			
				
				
				<mx:HBox width="100%" horizontalAlign="left" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:VBox left="6" right="6" top="6" bottom="6">
						<mx:Label text="年"     />
						<mx:Label text="终"     />
						<mx:Label text="工"     />
						<mx:Label text="作"     />
						<mx:Label text="总"     />
						<mx:Label text="结"     />
					</mx:VBox>					
					
					<mx:VBox width="100%" height="100%">
						<mx:TextArea id="b_textArea" width="100%" height="100%"
									 editable="{!workPlan || workPlan.statusId == 1}"/>
						<mx:Label id="b_personTxt" text="填写人："/>
					</mx:VBox>
				</mx:HBox>					
				
				
				<mx:HBox id="browseForm_approve"  horizontalAlign="left" width="0" height="0" horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false">
					<mx:VBox left="6" right="6" top="6" bottom="6">
						<mx:Label text="评"     />
						<mx:Label text="价"     />
					</mx:VBox>					
					<mx:VBox width="100%" height="100%">
						<mx:TextArea id="b_textArea_app" width="100%" height="100%"
									 editable="false"/>
						<mx:HBox  horizontalCenter="0" width="100%">
							<mx:Label left="0"   id="dateTxt"/>
							<mx:Spacer width="100%"/>
							<mx:Label right="0" id="b_personTxt_eva"/>
						</mx:HBox>						
					</mx:VBox>
				</mx:HBox>				
				
			</mx:VBox>			
		</mx:ViewStack>
	</mx:VBox>
	
</mx:Canvas>
