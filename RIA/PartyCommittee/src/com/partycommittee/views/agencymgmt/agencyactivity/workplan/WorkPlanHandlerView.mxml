<?xml version="1.0" encoding="utf-8"?>
<control:EscapeWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  xmlns:control="com.partycommittee.control.*"
					  horizontalAlign="center" verticalAlign="middle"
					  showCloseButton="true" titleStyleName="panelTitle"
					  close="PopupMgr.instance.removeWindow(this)" 
					  height="650" width="900"
					  title="{workPlanTitle}"
					  creationComplete="onCreationCompleted()"
					  xmlns:button="com.partycommittee.control.button.*" 
					  xmlns:richtexttoolbar="com.partycommittee.control.richtexttoolbar.*">
	<fx:Script>
		<![CDATA[
			import com.partycommittee.events.PcWorkPlanEvent;
			import com.partycommittee.manager.popup.PopupMgr;
			import com.partycommittee.util.CRUDEventType;
			import com.partycommittee.util.DataproviderFactory;
			import com.partycommittee.util.WorkPlanCodeUtil;
			import com.partycommittee.views.agencymgmt.agencyactivity.BrowseWorkplanView;
			import com.partycommittee.vo.PcAgencyVo;
			import com.partycommittee.vo.PcWorkPlanContentVo;
			import com.partycommittee.vo.PcWorkPlanVo;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			private var isNew:Boolean = true;
			
			[Bindable]
			private var isApproval:Boolean = false;
			[Bindable]
			private var workPlanTitle:String;
			[Bindable]
			private var hasHandle:Boolean = false;
			
			[Bindable]
			private var year:Number;
			[Bindable]
			private var quarter:Number = 1;
			
			private var _workPlan:PcWorkPlanVo;
			[Bindable]
			public function get workPlan():PcWorkPlanVo {
				return this._workPlan;
			}
			public function set workPlan(value:PcWorkPlanVo):void {
				this._workPlan = value;
			}
			
			private var _type:Number;
			[Bindable]
			public function get type():Number {
				return this._type;
			}
			public function set type(value:Number):void {
				this._type = value;
			}
			
			[Bindable]
			private var yearDp:ArrayCollection;
			
			private var _agency:PcAgencyVo;
			[Bindable]
			public function get agency():PcAgencyVo {
				return this._agency;
			}
			public function set agency(value:PcAgencyVo):void {
				this._agency = value;
			}
			
			private var _parentView:BrowseWorkplanView;
			[Bindable]
			public function get parentView():BrowseWorkplanView {
				return this._parentView;
			}
			public function set parentView(value:BrowseWorkplanView):void {
				this._parentView = value;
			}
			
			private function onCreationCompleted():void {
				updateData();
			}
			
			private function updateData():void {
				if (!agency || !workPlan) {
					return;
				}
				
				year = workPlan.year;
				quarter = workPlan.quarter;
				
				if (type == PCConst.WORKFLOW_TYPE_APPROVAL) {
					isApproval = true;
				}
				
				switch (workPlan.typeId) {
					case PCConst.WORKPLAN_TYPE_YEARLY:
						workPlanTitle = year + "年度工作计划";
						quarterBox.visible = quarterBox.includeInLayout = false;
						break;
					case PCConst.WORKPLAN_TYPE_YEARLY_SUMMARY:
						workPlanTitle = year + "年终工作总结";
						quarterBox.visible = quarterBox.includeInLayout = false;
						break;
					case PCConst.WORKPLAN_TYPE_QUARTER:
						workPlanTitle = year + "年第" + quarter + "季度工作计划";
						break;
					case PCConst.WORKPLAN_TYPE_QUARTER_SUMMARY:
						workPlanTitle = year + "年第" + quarter + "季度执行情况计划";
						break;
				}
				
				if (isApproval) {
					workPlanTitle += "审批";
					handleBtn.label = "审批";
					handlePersonLbl.text = "审批人:";
				} else {
					workPlanTitle += "评价";
					handleBtn.label = "评价";
					handlePersonLbl.text = "评价人:";
				}
				
				if (workPlan.id) {
					isNew = false;
					if (workPlan.workPlanContent) {
						personTxt.text = workPlan.workPlanContent.memberName;
						textArea.htmlText = workPlan.workPlanContent.content;
					} else {
						loadWorkPlanContent();
					}
				} else {
					isNew = true;
				}
			}
			
			private function loadWorkPlanContent():void {
				var evt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.GET_WORKPLAN_CONTENT_BY_WORKPLANID);
				evt.workPlan = workPlan;
				evt.successCallback = onLoadContentSuccess;
				evt.failureCallback = onLoadContentFailure;
				this.enabled = false;
				evt.dispatch();
			}
			
			private function onLoadContentFailure(info:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("读取工作计划内容失败！");
			}
			
			private function onLoadContentSuccess(data:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				var workPlanContent:PcWorkPlanContentVo = data as PcWorkPlanContentVo;
				personTxt.text = workPlanContent.memberName;
				textArea.htmlText = workPlanContent.content;
				if (isApproval) {
					getApprovalInfo();
				} else {
					getEvaluateInfo();
				}
			}
			
			private function getApprovalInfo():void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.GET_APPROVAL_INFO);
				workPlanEvt.workPlan = workPlan;
				workPlanEvt.successCallback = onGetApprovalInfoSuccess;
				workPlanEvt.failureCallback = onGetApprovalInfoFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function onGetApprovalInfoSuccess(data:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				if (data as PcWorkPlanContentVo) {
					this.hasHandle = true;
					var contentVo:PcWorkPlanContentVo = data as PcWorkPlanContentVo;
					this.handlePersonTxt.text = contentVo.memberName;
					this.handleTextArea.htmlText = contentVo.content;
				} else {
					this.hasHandle = false;
				}
			}
			
			private function onGetApprovalInfoFailure(info:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show(info.toString());
			}
			
			private function getEvaluateInfo():void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.GET_EVALUATE_INFO);
				workPlanEvt.workPlan = workPlan;
				workPlanEvt.successCallback = onGetEvaluateInfoSuccess;
				workPlanEvt.failureCallback = onGetEvaluateInfoFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function onGetEvaluateInfoSuccess(data:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				if (data as PcWorkPlanContentVo) {
					this.hasHandle = true;
					var contentVo:PcWorkPlanContentVo = data as PcWorkPlanContentVo;
					this.handlePersonTxt.text = contentVo.memberName;
					this.handleTextArea.htmlText = contentVo.content;
				} else {
					this.hasHandle = false;
				}
			}
			
			private function onGetEvaluateInfoFailure(info:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show(info.toString());
			}
			
			private function onReturn():void {
				workPlan.statusId = 1;
				var evt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.RETURN_WORKPLAN, agency);
				evt.workPlan = workPlan;
				evt.successCallback = onReturnSuccess;
				evt.failureCallback = onReturnFailure;
				this.enabled = false;
				evt.dispatch();
			}
			
			private function onReturnSuccess(data:Object, evt:PcWorkPlanEvent):void {
				Alert.show("驳回成功！");
				this.enabled = true;
				parentView.refreshData();
				this.close();
			}
			
			private function onReturnFailure(data:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("驳回失败！");
			}			
			
			private function onHandle():void {
				if (isApproval) {
					doApproval();
				} else {
					doEvaluate();
				}
			}
			
			private function doApproval():void {
				var approvalEvt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.APPROVAL_WORKPLAN, agency);
				approvalEvt.workPlan = workPlan;
				approvalEvt.workPlanContent = getHandleContent();
				approvalEvt.successCallback = onApprovalSuccess;
				approvalEvt.failureCallback = onApprovalFailure;
				this.enabled = false;
				approvalEvt.dispatch();
			}
			
			private function onApprovalSuccess(data:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				parentView.refreshData();
				this.close();
			}
			
			private function onApprovalFailure(data:Object, evt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("审批失败！");
			}
			
			private function doEvaluate():void {
				var evaluateEvt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.EVALUATE_WORKPLAN, agency);
				evaluateEvt.workPlan = workPlan;
				evaluateEvt.workPlanContent = getHandleContent();
				evaluateEvt.successCallback = onEvaluateSuccess;
				evaluateEvt.failureCallback = onEvaluateFailure;
				this.enabled = false;
				evaluateEvt.dispatch();
			}
			
			private function onEvaluateSuccess(data:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				parentView.refreshData();
				this.close();
			}
			
			private function onEvaluateFailure(info:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("评价失败！");
			}
			
			private function getHandleContent():PcWorkPlanContentVo {
				var contentVo:PcWorkPlanContentVo = new PcWorkPlanContentVo();
				contentVo.memberName = handlePersonTxt.text;
				contentVo.content = handleTextArea.htmlText;
				return contentVo;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:VBox width="100%" height="100%"
			 left="6" right="6" top="6" bottom="6"
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:HBox width="100%" horizontalAlign="center"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Label fontSize="20" fontWeight="bold" text="{workPlanTitle}"/>
		</mx:HBox>
		<mx:HBox width="100%" height="100%"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:VBox width="50%" height="100%"
					 horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:Label text="年    份："/>
					<mx:Label text="{year}"/>
				</mx:HBox>
				<mx:HBox id="quarterBox" width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:Label text="季    度："/>
					<mx:Label text="{quarter}"/>
				</mx:HBox>
				<mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:Label text="填写人："/>
					<mx:TextInput id="personTxt" width="200"
								  editable="false"/>
				</mx:HBox>
				<richtexttoolbar:PopupRichTextToolBar width="100%" target="{textArea}"/>
				<mx:TextArea id="textArea" width="100%" height="100%"
							 editable="false"/>
			</mx:VBox>
			<mx:VRule height="100%"/>
			<mx:VBox width="50%" height="100%"
					 horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:Label id="handlePersonLbl"/>
					<mx:TextInput id="handlePersonTxt" width="200"
								  editable="{!hasHandle}"/>
				</mx:HBox>
				
				<mx:TextArea id="handleTextArea" width="100%" height="100%"
							 editable="{!hasHandle}"/>
			</mx:VBox>
		</mx:HBox>
		
		<mx:ControlBar width="100%" horizontalAlign="center" verticalAlign="middle">
			<button:PcButton id="returnBtn" label="驳回" click="onReturn()" />
			<button:PcButton id="handleBtn" click="onHandle()" visible="{!hasHandle}" includeInLayout="{!hasHandle}"/>
			<button:PcButton label="关闭" click="close()"/>
		</mx:ControlBar>
	</mx:VBox>
	
</control:EscapeWindow>
