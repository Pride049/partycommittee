<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   styleName="mainCanvas"
		   width="100%" height="100%" 
		   label="年度计划"
		   creationComplete="onCreationCompleted()"
		   xmlns:button="com.partycommittee.control.button.*" 
		   xmlns:richtexttoolbar="com.partycommittee.control.richtexttoolbar.*"
		   verticalScrollPolicy="auto">
	<fx:Script>
		<![CDATA[
			import com.partycommittee.events.PcWorkPlanEvent;
			import com.partycommittee.manager.popup.PopupMgr;
			import com.partycommittee.model.ModelLocator;
			import com.partycommittee.util.CRUDEventType;
			import com.partycommittee.util.DataproviderFactory;
			import com.partycommittee.util.WorkPlanCodeUtil;
			import com.partycommittee.util.WorkPlanStatusUtil;
			import com.partycommittee.vo.PcAgencyVo;
			import com.partycommittee.vo.PcWorkPlanContentVo;
			import com.partycommittee.vo.PcWorkPlanVo;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			public var tab:TabNavigator;
			
			[Bindable]
			private var workPlanStatusLbl:String;
			
			[Bindable]
			public var browseMode:Boolean = false;
			
			[Bindable]
			private var year:Number;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			private var _workPlan:PcWorkPlanVo;
			[Bindable]
			public function get workPlan():PcWorkPlanVo {
				return this._workPlan;
			}
			public function set workPlan(value:PcWorkPlanVo):void {
				this._workPlan = value;
			}
			
			[Bindable]
			private var yearDp:ArrayCollection;
			
			private var _agency:PcAgencyVo;
			[Bindable]
			public function get agency():PcAgencyVo {
				return this._agency;
			}
			public function set agency(value:PcAgencyVo):void {
				this._agency = value;
			}
			
			private function onCreationCompleted():void {
				model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChanged);
				addEventListener(FlexEvent.SHOW, onViewShow);
				year = model.reportYear;
				if (year) {
					refresh();
				}
			}
			
			private function onViewShow(event:FlexEvent):void {
				refresh();
			}
			
			private function resetData():void {
				workPlan = null;
				personTxt.text = "";
				textArea.htmlText = "";
				workPlanStatusLbl = "";
			}
			
			private function onPropertyChanged(event:PropertyChangeEvent):void {
				if (event.property == "reportYear") {
					this.year = model.reportYear;
					if (this.tab && this.tab.selectedChild == this) {
						refresh();
					}
				}
			}
			
			private function refresh():void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(PcWorkPlanEvent.GET_WORKPLAN_YEARLY, agency);
				workPlanEvt.year = year;
				workPlanEvt.successCallback = onGetWorkPlanSuccess;
				workPlanEvt.failureCallback = onGetWorkPlanFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function onGetWorkPlanSuccess(data:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				if (!data) {
					resetData();
					return;
				}
				workPlan = data as PcWorkPlanVo;
				if (!workPlan) {
					return;
				}
				
				workPlanStatusLbl =  WorkPlanStatusUtil.getWorkPlanStatusDes(workPlan.statusId);
				if (workPlanStatusLbl != "") {
					workPlanStatusLbl = " (" + workPlanStatusLbl + ")";
				}
				if (workPlan.workPlanContent) {
					personTxt.text = workPlan.workPlanContent.memberName;
					textArea.htmlText = workPlan.workPlanContent.content;
				}
			}
			
			private function onGetWorkPlanFailure():void {
				this.enabled = true;
			}
			
			private function onSaveAndCommit():void {
				if (workPlan) {
					doUpdate(true);
				} else {
					doCreate(true);
				}
			}
			
			private function onSaveWithoutSubmit():void {
				if (workPlan) {
					doUpdate();
				} else {
					doCreate();
				}
			}
			
			private function doUpdate(isCommit:Boolean = false):void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(CRUDEventType.UPDATE);
				var updateWorkPlan:PcWorkPlanVo = getUpdateWorkPlan();
				updateWorkPlan.statusId = isCommit ? 1 : 2;
				workPlanEvt.workPlan = updateWorkPlan;
				workPlanEvt.successCallback = onWorkPlanUpdateSuccess;
				workPlanEvt.failureCallback = onWorkPlanUpdateFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function doCreate(isCommit:Boolean = false):void {
				var workPlanEvt:PcWorkPlanEvent = new PcWorkPlanEvent(CRUDEventType.CREATE);
				var newWorkPlan:PcWorkPlanVo = getNewWorkPlan();
				newWorkPlan.statusId = isCommit ? 1 : 2;
				workPlanEvt.workPlan = newWorkPlan;
				workPlanEvt.successCallback = onWorkPlanCreateSuccess;
				workPlanEvt.failureCallback = onWorkPlanCreateFailure;
				this.enabled = false;
				workPlanEvt.dispatch();
			}
			
			private function onWorkPlanCreateSuccess(data:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				refresh();
			}
			
			private function onWorkPlanCreateFailure(info:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("保存年度工作计划失败！");
			}
			
			private function onWorkPlanUpdateSuccess(data:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				refresh();
			}
			
			private function onWorkPlanUpdateFailure(info:Object, workPlanEvt:PcWorkPlanEvent):void {
				this.enabled = true;
				Alert.show("修改年度工作计划失败！");
			}
			
			private function getNewWorkPlan():PcWorkPlanVo {
				var workPlan:PcWorkPlanVo = new PcWorkPlanVo();
				workPlan.typeId = PCConst.WORKPLAN_TYPE_YEARLY;
				workPlan.year = year;
				workPlan.agencyId = agency.id;
				workPlan.workPlanContent = getWorkPlanContent();
				return workPlan;
			}
			
			private function getUpdateWorkPlan():PcWorkPlanVo {
				workPlan.workPlanContent.memberName = personTxt.text;
				workPlan.workPlanContent.content = textArea.htmlText;
				return workPlan;
			}
			
			private function getWorkPlanContent():PcWorkPlanContentVo {
				var workPlanContent:PcWorkPlanContentVo = new PcWorkPlanContentVo();
				workPlanContent.content = textArea.htmlText;
				workPlanContent.memberName = personTxt.text;
				workPlanContent.type = PCConst.WORKFLOW_TYPE_REPORT;
				return workPlanContent;
			}
			
			private function onBrowseApproval():void {
				var commentView:CommentView = new CommentView();
				commentView.workPlan = workPlan;
				PopupMgr.instance.popupWindow(commentView);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:VBox width="100%" height="100%"
			 left="6" right="6" top="6" bottom="6"
			 horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:HBox width="100%" horizontalAlign="center"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Label fontSize="20" fontWeight="bold" text="{year + '年度工作计划'}"/>
			<mx:Label fontSize="20" fontWeight="bold"
					  text="{workPlanStatusLbl}"/>
		</mx:HBox>

		<richtexttoolbar:PopupRichTextToolBar width="100%" target="{textArea}"/>
		<mx:TextArea id="textArea" width="100%" height="100%"
					 editable="{!workPlan || workPlan.statusId == 2}"/>
		
		<mx:HBox horizontalAlign="left" width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Label text="填写人："/>
			<mx:TextInput id="personTxt" width="200"
						  editable="{!workPlan || workPlan.statusId == 2}"/>
		</mx:HBox>		
		
		<!--
		<mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Label text="年    份："/>
			<mx:ComboBox id="yearCmb" dataProvider="{yearDp}" change="onYearCmbChanged()"/>
		</mx:HBox>
		-->
		<mx:ControlBar width="100%" horizontalAlign="center" verticalAlign="middle"
					   visible="{!browseMode}" includeInLayout="{!browseMode}">
			<button:PcButton label="暂存" click="onSaveWithoutSubmit()"
							 visible="{!workPlan || workPlan.statusId == 2}"/>
			<button:PcButton label="上报" click="onSaveAndCommit()"
							 visible="{!workPlan || workPlan.statusId == 2}"/>
			<button:PcButton label="查看审批"
							 visible="{workPlan &amp;&amp; workPlan.statusId == 3}"
							 click="onBrowseApproval()"/>
		</mx:ControlBar>
	</mx:VBox>
	
</mx:Canvas>
