<?xml version="1.0" encoding="utf-8"?>
<navigation:NavigationView xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx"
						   styleName="mainCanvas"
						   width="100%" height="100%" 
						   xmlns:button="com.partycommittee.control.button.*" 
						   xmlns:datagrid="com.partycommittee.control.datagrid.*"
						   xmlns:navigation="com.partycommittee.manager.navigation.*"
						   creationComplete="onCreationCompleted()">
	
	<fx:Script>
		<![CDATA[
			import com.partycommittee.events.PcMemberEvent;
			import com.partycommittee.manager.popup.PopupMgr;
			import com.partycommittee.model.ModelLocator;
			import com.partycommittee.util.CRUDEventType;
			import com.partycommittee.util.LblFunctionHelper;
			import com.partycommittee.vo.PcAgencyVo;
			import com.partycommittee.vo.PcMemberVo;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			[Bindable]
			private var dp:ArrayCollection = new ArrayCollection();
			
			private function onCreationCompleted():void {
			}
			
			override protected function onNavigateIn():void {
				model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChanged);
				if (model.focusAgencyVo == agencyVo) {
					return;
				}
				agencyVo = model.focusAgencyVo;
				refreshData();
			}
			
			override protected function onNavigateOut():void {
				if (model.hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE)) {
					model.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChanged);
				}
			}
			
			private function onPropertyChanged(event:PropertyChangeEvent):void {
				if (event.property == "focusAgencyVo") {
					agencyVo = model.focusAgencyVo;
					refreshData();
				}
			}
			
			private var _agencyVo:PcAgencyVo;
			public function set agencyVo(value:PcAgencyVo):void {
				this._agencyVo = value;
			}
			[Bindable]
			public function get agencyVo():PcAgencyVo {
				return this._agencyVo;
			}
			
			public function refreshData():void {
				if (!agencyVo || (agencyVo.codeId != 10 && agencyVo.codeId != 13)) {
					this.enabled = false;
					return;
				}
				this.enabled = true;
				var memberEvent:PcMemberEvent = new PcMemberEvent(PcMemberEvent.GET_MEMBERS_BY_AGENCYID, 
					null, agencyVo.id);
				memberEvent.successCallback = onRefreshMembers;
				memberEvent.dispatch();
			}
			
			private function onRefreshMembers(data:Object, event:PcMemberEvent):void {
				dp = data as ArrayCollection;
			}
			
			private function addMember():void {
				if (!agencyVo) {
					return;
				}
				var window:PartyMemberWindow = new PartyMemberWindow();
				window.parentView = this;
				PopupMgr.instance.popupWindow(window);
			}
			
			private function updateMember():void {
				var window:PartyMemberWindow = new PartyMemberWindow();
				window.type = CRUDEventType.UPDATE;
				window.parentView = this;
				window.title = "修改党员";
				window.memberVo = datagrid. selectedItem as PcMemberVo;
				PopupMgr.instance.popupWindow(window);
			}
			
			private var deleteMemberList:ArrayCollection = new ArrayCollection();
			private function deleteMember():void {
				deleteMemberList = new ArrayCollection(datagrid.selectedItems);
				Alert.show("确定要删除党员【" + getSelectedNames().join(", ") + "】？", "提示", 
					Alert.YES | Alert.NO, FlexGlobals.topLevelApplication.root, onDeleteAlertClose);
			}
			
			private function getSelectedNames():Array {
				var nameList:Array = new Array();
				for each (var memberItem:PcMemberVo in deleteMemberList) {
					nameList.push(memberItem.name);
				}
				return nameList;
			}
			
			private function onDeleteAlertClose(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					doDelete();
				}
			}
			
			private function doDelete():void {
				var memberEvt:PcMemberEvent = new PcMemberEvent(CRUDEventType.DELETE, null, 0, deleteMemberList);
				memberEvt.successCallback = onDeleteMemberSuccess;
				memberEvt.failureCallback = onDeleteMemberFailure;
				this.enabled = false;
				memberEvt.dispatch();
			}
			
			private function onDeleteMemberSuccess(data:Object, evt:PcMemberEvent):void {
				this.enabled = true;
				refreshData();
			}
			
			private function onDeleteMemberFailure(info:Object, evt:PcMemberEvent):void {
				this.enabled = true;
				Alert.show(info.toString());
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<navigation:constraintRows>
		<s:ConstraintRow id="headerRow" height="30"/>
		<s:ConstraintRow id="mainRow" height="100%"/>
	</navigation:constraintRows>
	
	<mx:Canvas top="headerRow:0" bottom="headerRow:0"
			   width="100%">
		<mx:Label fontSize="20" fontWeight="bold"
				  horizontalCenter="0" verticalCenter="0"
				  text="党员管理"/>
	</mx:Canvas>
	
	<mx:VBox width="100%" top="mainRow:0" bottom="mainRow:0">
		<mx:ControlBar width="100%" horizontalAlign="right">
			<button:PcButton label="建立" click="addMember()"/>
			<button:PcButton label="修改" click="updateMember()" enabled="{datagrid.selectedItem}"/>
			<button:PcButton label="删除" click="deleteMember()" enabled="{datagrid.selectedItem}"/>
		</mx:ControlBar>
		<mx:AdvancedDataGrid id="datagrid" width="100%" height="100%" 
										   headerStyleName="dataGridHeader"
										   allowMultipleSelection="true"
										   dataProvider="{dp}">
			<mx:columns>
				<mx:AdvancedDataGridColumn headerText="姓名" dataField="name"/>
				<mx:AdvancedDataGridColumn headerText="性别" dataField="sexId" 
										   labelFunction="{LblFunctionHelper.memberSexLblFunc}"/>
				<mx:AdvancedDataGridColumn headerText="民族" dataField="nation"/>
				<mx:AdvancedDataGridColumn headerText="出生年月" dataField="birthday"
										   labelFunction="{LblFunctionHelper.dateLblFunc}"/>
				<mx:AdvancedDataGridColumn headerText="籍贯" dataField="birthPlace"/>
				<mx:AdvancedDataGridColumn headerText="职务" dataField="dutyId"
										   labelFunction="{LblFunctionHelper.memberDutyLblFunc}"/>
				<mx:AdvancedDataGridColumn headerText="何时入党" dataField="joinday"
										   labelFunction="{LblFunctionHelper.dateLblFunc}"/>
				<mx:AdvancedDataGridColumn headerText="参加工作时间" dataField="workday"
										   labelFunction="{LblFunctionHelper.dateLblFunc}"/>
			</mx:columns>
		</mx:AdvancedDataGrid>
		<mx:ControlBar width="100%" horizontalAlign="right">
			<button:PcButton label="下载Excel模板"/>
			<button:PcButton label="上传党员Excel"/>
			<button:PcButton label="生成Excel"/>
		</mx:ControlBar>
	</mx:VBox>
	
</navigation:NavigationView>
