<?xml version="1.0" encoding="utf-8"?>
<navigation:NavigationView xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx"
						   styleName="mainCanvas"
						   width="100%" height="100%" 
						   xmlns:navigation="com.partycommittee.manager.navigation.*" 
						   creationComplete="onCreationCompleted()">
	<fx:Script>
		<![CDATA[
			import com.partycommittee.events.PcMeetingEvent;
			import com.partycommittee.events.PcRemindEvent;
			import com.partycommittee.events.PcWorkPlanEvent;
			import com.partycommittee.model.ModelLocator;
			import com.partycommittee.util.LblFunctionHelper;
			import com.partycommittee.views.MainContainer;
			import com.partycommittee.vo.PcAgencyVo;
			import com.partycommittee.vo.PcMeetingVo;
			import com.partycommittee.vo.PcUserVo;
			import com.partycommittee.vo.PcWorkPlanVo;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.containers.ViewStack;
			import mx.controls.Alert;
			import mx.events.PropertyChangeEvent;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			[Bindable]
			private var dp:ArrayCollection = new ArrayCollection();
						
			private function onCreationCompleted():void {
					onNavigateIn();
			}
			
			private function onPropertyChanged(event:PropertyChangeEvent):void {
				if (event.property == "focusAgencyVo") {
					//model.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChanged);
					onNavigateIn();
				} 
			}
			
			override protected function onNavigateIn():void {
				model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChanged);
				dg.addEventListener(TextEvent.LINK, onEventTextLink, false , 0, true); 				
				
				dp = new ArrayCollection();
				
				
				
				
				if (model.focusAgencyVo && model.focusAgencyVo.codeId == 10) {
					var pcRemindEvt:PcRemindEvent = new PcRemindEvent(PcRemindEvent.GET_REAL_REMIND_BY_ID);
					pcRemindEvt.agencyId = model.focusAgencyVo.id;
					pcRemindEvt.year = new Date().getFullYear();
					pcRemindEvt.quarter = getQuarter();
					pcRemindEvt.successCallback = onGetRemindSuccess;
					pcRemindEvt.failureCallback = onGetRemindFailure;
					pcRemindEvt.dispatch();
				}
			}
			
			override protected function onNavigateOut():void {
				model.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChanged);
			}
			
			private function onGetRemindSuccess(data:Object, evt:PcRemindEvent):void {
				if (data) {
					dp.addAll(data as ArrayCollection);
				}
			}
			
			private function onGetRemindFailure(info:Object, evt:PcRemindEvent):void {
				Alert.show(info.toString());
			}

			private function getQuarter():Number {
				var month:Number = new Date().getMonth();
				if (month <= 3) {
					return 1;
				} else if (month <= 6) {
					return 2;
				} else if (month <= 9) {
					return 3;
				} else {
					return 4;
				}
			}
			
			protected function onEventTextLink(event:TextEvent):void {
				
				
				var item:Object = dg.selectedItem;
				var eventText:String = event.text;
				if (eventText == 'nowp') {
					
					if (this.parent.parent.parent.parent is MainContainer) {
						var obj:Object = this.parent.parent.parent.parent as MainContainer;
						(obj.mainViewStack as ViewStack).selectedIndex = 2;
						var nobj:Object = (obj.mainViewStack as ViewStack).getChildByName('activityView');
						
						var sobj:Object = (nobj as NavigationView).getChildByName('tab');
						sobj.selectedIndex = 0;
						
						var tobj:Object = (sobj as TabNavigator).getChildAt(0);
						
						var fobj:Object = (tobj as NavigationView).getChildByName('tab');
//						fobj.selectedIndex = 2;
						
						var typeId:Number;
						if (item is PcWorkPlanVo) {
							typeId = (item as PcWorkPlanVo).typeId;
						} else if (item is PcMeetingVo) {
							typeId = (item as PcMeetingVo).typeId;
						}
						switch (typeId) {
							case PCConst.WORKPLAN_TYPE_YEARLY:
								fobj.selectedIndex = 0;
								break;
							case PCConst.WORKPLAN_TYPE_YEARLY_SUMMARY:
								fobj.selectedIndex = 8;
								break;
							case PCConst.WORKPLAN_TYPE_QUARTER:
								fobj.selectedIndex = 1;
								break;
							case PCConst.WORKPLAN_TYPE_QUARTER_SUMMARY:
								fobj.selectedIndex = 2;
								break;
							case PCConst.WORKPLAN_TYPE_CLASS:
								fobj.selectedIndex = 3;
								break;
							case PCConst.WORKPLAN_TYPE_MEETING_BRANCH_COMMITTEE:
								fobj.selectedIndex = 5;
								break;
							case PCConst.WORKPLAN_TYPE_MEETING_BRANCH_MEMBER:
								fobj.selectedIndex = 4;
								break;
							case PCConst.WORKPLAN_TYPE_MEETING_BRANCH_LIFE:
								fobj.selectedIndex = 6;
								break;
//							case PCConst.WORKPLAN_TYPE_MEETING_TEAM:
//								Alert.show("党小组会");
//								break;
							case PCConst.WORKPLAN_TYPE_MEETING_OTHER:
								fobj.selectedIndex = 7;
								break;
						}
					}
				}
			}			
			
			

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:AdvancedDataGrid id="dg" dataProvider="{dp}" width="100%" height="100%">
		<mx:columns>
			<mx:AdvancedDataGridColumn headerText="内容" dataField="typeId"
									   labelFunction="{LblFunctionHelper.workPlanTypeLblFunc}"/>
			<mx:AdvancedDataGridColumn headerText="状态" dataField="data"
				itemRenderer="com.partycommittee.renderers.WpStatusRenderer">
				
			</mx:AdvancedDataGridColumn>
		</mx:columns>
	</mx:AdvancedDataGrid>
	
</navigation:NavigationView>
