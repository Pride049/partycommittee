<?xml version="1.0" encoding="utf-8"?>
<navigation:NavigationView xmlns:fx="http://ns.adobe.com/mxml/2009" 
						   xmlns:s="library://ns.adobe.com/flex/spark" 
						   xmlns:mx="library://ns.adobe.com/flex/mx"
						   styleName="mainCanvas"
						   width="100%" height="100%" 
						   xmlns:button="com.partycommittee.control.button.*" 
						   xmlns:datagrid="com.partycommittee.control.datagrid.*"
						   xmlns:navigation="com.partycommittee.manager.navigation.*" 
						   xmlns:component="com.partycommittee.views.agencymgmt.component.*"
						   creationComplete="onCreationCompleted()" 
						   xmlns:agencyviews="com.partycommittee.views.agencymgmt.agencyviews.*" 
						   xmlns:partymember="com.partycommittee.views.partymember.*">
	<fx:Script>
		<![CDATA[
			import com.partycommittee.model.ModelLocator;
			import com.partycommittee.vo.PcAgencyVo;
			
			import mx.events.PropertyChangeEvent;
			
			private var _editEnable:Boolean = true;
			[Bindable]
			public function get editEnable():Boolean {
				return this._editEnable;
			}
			public function set editEnable(value:Boolean):void {
				this._editEnable = value;
			}
			
			private var _agency:PcAgencyVo;
			[Bindable]
			public function get agency():PcAgencyVo {
				return this._agency;
			}
			public function set agency(value:PcAgencyVo):void {
				this._agency = value;
			}
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			private function onCreationCompleted():void {
				onNavigateIn();
			}
			
			override protected function onNavigateIn():void {
				if (agency != model.focusAgencyVo) {
					agency = model.focusAgencyVo;
					updateData();
				}
				model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onModelChanged);
			}
			
			override protected function onNavigateOut():void {
				model.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onModelChanged);
			}
			
			private function onModelChanged(event:PropertyChangeEvent):void {
				if (event.property == "focusAgencyVo") {
					agency = model.focusAgencyVo;
					updateData();
				}
			}
			
			private function updateData():void {
				if (!this._agency) {
					return;
				}
				
				agencyView.updateData();
				memberView.updateData();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:TabNavigator width="100%" height="100%">
		<agencyviews:AgencyView id="agencyView" width="100%" height="100%" 
								label="基本情况" agency="{agency}" editEnable="{editEnable}"/>
		<!--
		<agencyviews:ChildrenAgencyView id="childrenView" width="100%" height="100%"
										label="下级党组织管理" agency="{agency}"/>
		-->
		<partymember:PartyMemberView id="memberView" width="100%" height="100%" 
									 label="支委管理" agency="{agency}" editEnable="{editEnable}"/>
	</mx:TabNavigator>
</navigation:NavigationView>
